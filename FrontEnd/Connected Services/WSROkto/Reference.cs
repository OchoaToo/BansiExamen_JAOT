//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WSROkto
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="tblExamen", Namespace="http://schemas.datacontract.org/2004/07/WsApiexamen")]
    public partial class tblExamen : object
    {
        
        private string DescripcionField;
        
        private string NombreField;
        
        private int idExamenField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descripcion
        {
            get
            {
                return this.DescripcionField;
            }
            set
            {
                this.DescripcionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nombre
        {
            get
            {
                return this.NombreField;
            }
            set
            {
                this.NombreField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idExamen
        {
            get
            {
                return this.idExamenField;
            }
            set
            {
                this.idExamenField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WSROkto.IWSOkto")]
    public interface IWSOkto
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWSOkto/AgregarExamen", ReplyAction="http://tempuri.org/IWSOkto/AgregarExamenResponse")]
        string[] AgregarExamen(int id, string Nombre, string Descripcion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWSOkto/AgregarExamen", ReplyAction="http://tempuri.org/IWSOkto/AgregarExamenResponse")]
        System.Threading.Tasks.Task<string[]> AgregarExamenAsync(int id, string Nombre, string Descripcion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWSOkto/GetTblExamens", ReplyAction="http://tempuri.org/IWSOkto/GetTblExamensResponse")]
        WSROkto.tblExamen[] GetTblExamens();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWSOkto/GetTblExamens", ReplyAction="http://tempuri.org/IWSOkto/GetTblExamensResponse")]
        System.Threading.Tasks.Task<WSROkto.tblExamen[]> GetTblExamensAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWSOkto/ConsultarExamen", ReplyAction="http://tempuri.org/IWSOkto/ConsultarExamenResponse")]
        WSROkto.tblExamen[] ConsultarExamen(int id, string Nombre, string Descripcion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWSOkto/ConsultarExamen", ReplyAction="http://tempuri.org/IWSOkto/ConsultarExamenResponse")]
        System.Threading.Tasks.Task<WSROkto.tblExamen[]> ConsultarExamenAsync(int id, string Nombre, string Descripcion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWSOkto/EliminarExamen", ReplyAction="http://tempuri.org/IWSOkto/EliminarExamenResponse")]
        string[] EliminarExamen(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWSOkto/EliminarExamen", ReplyAction="http://tempuri.org/IWSOkto/EliminarExamenResponse")]
        System.Threading.Tasks.Task<string[]> EliminarExamenAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWSOkto/ActualizarExamen", ReplyAction="http://tempuri.org/IWSOkto/ActualizarExamenResponse")]
        string[] ActualizarExamen(int id, string Nombre, string Descripcion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWSOkto/ActualizarExamen", ReplyAction="http://tempuri.org/IWSOkto/ActualizarExamenResponse")]
        System.Threading.Tasks.Task<string[]> ActualizarExamenAsync(int id, string Nombre, string Descripcion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWSOkto/ConsultarExamenbyId", ReplyAction="http://tempuri.org/IWSOkto/ConsultarExamenbyIdResponse")]
        WSROkto.tblExamen[] ConsultarExamenbyId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWSOkto/ConsultarExamenbyId", ReplyAction="http://tempuri.org/IWSOkto/ConsultarExamenbyIdResponse")]
        System.Threading.Tasks.Task<WSROkto.tblExamen[]> ConsultarExamenbyIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface IWSOktoChannel : WSROkto.IWSOkto, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class WSOktoClient : System.ServiceModel.ClientBase<WSROkto.IWSOkto>, WSROkto.IWSOkto
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WSOktoClient() : 
                base(WSOktoClient.GetDefaultBinding(), WSOktoClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IWSOkto.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WSOktoClient(EndpointConfiguration endpointConfiguration) : 
                base(WSOktoClient.GetBindingForEndpoint(endpointConfiguration), WSOktoClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WSOktoClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WSOktoClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WSOktoClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WSOktoClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WSOktoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string[] AgregarExamen(int id, string Nombre, string Descripcion)
        {
            return base.Channel.AgregarExamen(id, Nombre, Descripcion);
        }
        
        public System.Threading.Tasks.Task<string[]> AgregarExamenAsync(int id, string Nombre, string Descripcion)
        {
            return base.Channel.AgregarExamenAsync(id, Nombre, Descripcion);
        }
        
        public WSROkto.tblExamen[] GetTblExamens()
        {
            return base.Channel.GetTblExamens();
        }
        
        public System.Threading.Tasks.Task<WSROkto.tblExamen[]> GetTblExamensAsync()
        {
            return base.Channel.GetTblExamensAsync();
        }
        
        public WSROkto.tblExamen[] ConsultarExamen(int id, string Nombre, string Descripcion)
        {
            return base.Channel.ConsultarExamen(id, Nombre, Descripcion);
        }
        
        public System.Threading.Tasks.Task<WSROkto.tblExamen[]> ConsultarExamenAsync(int id, string Nombre, string Descripcion)
        {
            return base.Channel.ConsultarExamenAsync(id, Nombre, Descripcion);
        }
        
        public string[] EliminarExamen(int id)
        {
            return base.Channel.EliminarExamen(id);
        }
        
        public System.Threading.Tasks.Task<string[]> EliminarExamenAsync(int id)
        {
            return base.Channel.EliminarExamenAsync(id);
        }
        
        public string[] ActualizarExamen(int id, string Nombre, string Descripcion)
        {
            return base.Channel.ActualizarExamen(id, Nombre, Descripcion);
        }
        
        public System.Threading.Tasks.Task<string[]> ActualizarExamenAsync(int id, string Nombre, string Descripcion)
        {
            return base.Channel.ActualizarExamenAsync(id, Nombre, Descripcion);
        }
        
        public WSROkto.tblExamen[] ConsultarExamenbyId(int id)
        {
            return base.Channel.ConsultarExamenbyId(id);
        }
        
        public System.Threading.Tasks.Task<WSROkto.tblExamen[]> ConsultarExamenbyIdAsync(int id)
        {
            return base.Channel.ConsultarExamenbyIdAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWSOkto))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWSOkto))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:50703/WSOkto.svc");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return WSOktoClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IWSOkto);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return WSOktoClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IWSOkto);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IWSOkto,
        }
    }
}
